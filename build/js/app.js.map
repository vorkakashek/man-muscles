{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["'use strict';\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nconsole.log('[ Script is running ༼ つ ◕_◕ ༽つ ]');\nvar answers = [];\nvar questions = document.querySelectorAll('.quiz-question');\nvar current_q = questions.length;\nvar images = document.querySelectorAll('.quiz-aside-img'); // let likers = document.querySelectorAll('.quiz-liker')\n// Обрабатываем текущий вопрос\n\nvar currentQHandler = function currentQHandler() {\n  document.querySelector('#current-q').innerHTML = current_q + '/' + questions.length;\n\n  _toConsumableArray(questions).map(function (e) {\n    return e.classList.remove('current');\n  });\n\n  _toConsumableArray(images).map(function (e) {\n    return e.classList.remove('current');\n  });\n\n  questions[current_q - 1].classList.add('current');\n  images[current_q - 1].classList.add('current'); // показываем кнопку назад?\n\n  prevBtnHandler(); // Показываем кнопку далее?\n\n  nextBtnHandler(); // Инициируем liker \n\n  if (questions[current_q - 1].querySelector('.quiz-liker')) {\n    initLiker(questions[current_q - 1].querySelector('.quiz-liker'));\n  } // Шкала прогресса\n\n\n  document.querySelector('#quiz-progress .quiz-progress-value').style.width = 100 / questions.length * current_q + '%';\n};\n\nvar nextBtnHandler = function nextBtnHandler() {\n  var filled = document.querySelectorAll('.quiz-question')[current_q - 1].querySelectorAll('.filled'); // На последнем шаге меняем текст кнопки\n\n  if (current_q === questions.length) {\n    document.querySelector('#next-q').innerHTML = \"Отправить\";\n  } else {\n    document.querySelector('#next-q').innerHTML = \"Далее\";\n  } // Валидатор для каждого шага: не / показывать кнопку\n\n\n  if (validator()) {\n    document.querySelector('#next-q').style.display = 'block';\n  } else {\n    document.querySelector('#next-q').style.display = 'none';\n  }\n};\n\nvar validator = function validator() {\n  // radio && checkbox\n  var qq = document.querySelectorAll('.quiz-question')[current_q - 1]; // текущий вопрос\n\n  var radios = qq.querySelectorAll('input[type=\"radio\"]'); // все радио в вопросе\n\n  var checkboxes = qq.querySelectorAll('input[type=\"checkbox\"]'); // все чекбоксы в вопросе\n\n  var inputs_number = qq.querySelectorAll('input[type=\"number\"]'); // все инпуты number в вопросе\n\n  if (radios.length > 0 || checkboxes.length > 0) {\n    if (qq.querySelector('input:checked')) {\n      return true;\n    }\n  } // input number\n\n\n  if (inputs_number.length > 0) {\n    var filled = 0;\n    inputs_number.forEach(function (el) {\n      if (el.value.length > 0) {\n        filled++;\n      }\n    });\n\n    if (filled === inputs_number.length) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar prevBtnHandler = function prevBtnHandler() {\n  if (current_q > 1) {\n    document.querySelector('#prev-q').style.display = \"flex\";\n  } else {\n    document.querySelector('#prev-q').style.display = \"none\";\n  }\n};\n\nvar nextQ = function nextQ() {\n  if (current_q < questions.length) {\n    current_q++;\n    currentQHandler();\n  }\n};\n\nvar prevQ = function prevQ() {\n  if (current_q > 1) {\n    current_q--;\n    currentQHandler();\n  }\n};\n\nvar initLiker = function initLiker(liker) {\n  console.log('В этом вопросе есть Лайкер: ');\n  console.log(liker); // Инициализируем итемы лайкера\n\n  var items = liker.querySelectorAll('.quiz-liker-item');\n\n  if (items.length > 0) {\n    initLikerItems(items);\n  }\n\n  var current = 0;\n  items[current].classList.add('current'); // let nextItem = (current) => {\n  //     current++\n  // }\n  // Клик на ДА\n\n  liker.querySelector('.yes').addEventListener('click', function (e) {\n    var target = e.target;\n    console.log('ДА!');\n  }); // Клик на НЕЙТРАЛЬНО\n\n  liker.querySelector('.neutral').addEventListener('click', function (e) {\n    var target = e.target;\n    console.log('НЕЙТРАЛЬНО');\n  }); // Клик на НЕТ\n\n  liker.querySelector('.no').addEventListener('click', function (e) {\n    var target = e.target;\n    console.log('НЕТ!');\n  });\n};\n\nvar initLikerItems = function initLikerItems(items) {\n  console.log(items);\n\n  for (var i = 0; i < items.length; i++) {\n    items[i].style.transform = 'translateX(' + i * 30 + '%)';\n    items[i].style.zIndex = items.length - i;\n  }\n};\n\ndocument.addEventListener('click', function (e) {\n  var target = e.target;\n\n  if (target.matches('#prev-q')) {\n    prevQ();\n  }\n\n  if (target.matches('#next-q')) {\n    nextQ();\n  }\n}); // Отслеживаем радио \n\nif (document.querySelector('input[type=\"radio\"]')) {\n  document.querySelectorAll('input[type=\"radio\"]').forEach(function (elem) {\n    elem.addEventListener(\"change\", function (e) {\n      var target = e.target;\n      var parent = target.closest('.quiz-answer-frame');\n\n      _toConsumableArray(parent.querySelectorAll('.input-radio')).map(function (e) {\n        return e.classList.remove('selected');\n      });\n\n      target.closest('.input-radio').classList.add('selected');\n\n      if (target.hasAttribute('autonext')) {\n        nextQ();\n      }\n\n      nextBtnHandler();\n    });\n  });\n} // Отслеживаем чекбоксы\n\n\nif (document.querySelector('input[type=\"checkbox\"]')) {\n  document.querySelectorAll('input[type=\"checkbox\"]').forEach(function (elem) {\n    elem.addEventListener(\"change\", function (e) {\n      var target = e.target;\n      var parent = target.closest('.quiz-answer-frame');\n      target.closest('.input-checkbox').classList.toggle('selected');\n      console.log('aaa');\n      nextBtnHandler();\n    });\n  });\n} // Отслеживаем числовые инпуты\n\n\nif (document.querySelector('input[type=\"number\"]')) {\n  document.querySelectorAll('input[type=\"number\"]').forEach(function (elem) {\n    elem.addEventListener(\"input\", function (e) {\n      var target = e.target;\n      var parent = target.closest('.quiz-answer-frame');\n\n      if (target.value.length > 0) {\n        target.closest('.input-text').classList.add('filled');\n      } else {\n        target.closest('.input-text').classList.remove('filled');\n      }\n\n      nextBtnHandler();\n    });\n  });\n} // После загрузки стр вызываем функции\n\n\ncurrentQHandler();"],"file":"app.js"}